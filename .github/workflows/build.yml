name: CI
on:
  push:
    branches: [main, 'mengwong/build*']
  pull_request:
    branches: [main]

# INFO: The following configuration block ensures that only one build runs per branch,
# which may be desirable for projects with a costly build process.
# Remove this block from the CI workflow to let each CI job run to completion.
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-haskell:
    name: GHC ${{ matrix.ghc-version }} on ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    container: ${{ (matrix.runner == 'ubuntu-latest' && fromJSON('{"image":"ubuntu:24.04"}')) || null }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            name: "Ubuntu Latest with docker"
          - runner: [self-hosted, macOS, ARM64]
            name: "apple silicon"
          - runner: [self-hosted, macOS, X64]
            name: "rosetta intel"
        ghc-version: ["9.6"]
    env:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8

    steps:
      - name: Update repositories (Ubuntu)
        if: matrix.runner == 'ubuntu-latest'
        run: apt update

      - name: Install deps (Ubuntu)
        if: matrix.runner == 'ubuntu-latest'
        run: >
          apt install -y
          git
          sudo
          software-properties-common
          build-essential
          curl
          libffi-dev
          libffi8
          libgmp-dev
          libgmp10
          libncurses-dev
          pkg-config
          zlib1g-dev
          liblzma-dev
          xz-utils

      - name: Install deps (macOS, x86_64)
        if: contains(matrix.runner, 'X64') && contains(matrix.runner, 'macOS')
        env:
          HOMEBREW_PREFIX: "/usr/local"
          HOMEBREW_CELLAR: "/usr/local/homebrew/Cellar"
        run: |
          PATH="/usr/local/homebrew/bin:$PATH"
          arch -x86_64 brew install \
            pkg-config \
            libffi \
            gmp \
            ncurses \
            xz

      - name: Install deps (macOS, arm64)
        if: contains(matrix.runner, 'ARM64') && contains(matrix.runner, 'macOS')
        run: |
          arch -arm64 brew install \
            pkg-config \
            libffi \
            gmp \
            ncurses \
            xz

      - name: Update git config
        run: git config --global --add safe.directory $GITHUB_WORKSPACE
      - uses: actions/checkout@v4

      - name: Update git submodules
        run: git submodule update --init

      - name: Set up GHC ${{ matrix.ghc-version }}
        uses: haskell-actions/setup@v2
        id: setup
        with:
          ghc-version: ${{ matrix.ghc-version }}
          # Defaults, added for clarity:
          cabal-version: "latest"
          cabal-update: true

      - name: Configure the build
        run: |
          cabal update
          cabal configure --enable-tests --enable-benchmarks --disable-documentation
          cabal build all --dry-run
        # The last step generates dist-newstyle/cache/plan.json for the cache key.

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        id: cache
        env:
          key: ${{ runner.name }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: Install dependencies
        # If we had an exact cache hit, the dependencies will be up to date.
        if: steps.cache.outputs.cache-hit != 'true'
        run: cabal build all --only-dependencies

      # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
      - name: Save cached dependencies
        uses: actions/cache/save@v4
        # If we had an exact cache hit, trying to save the cache would error because of key clash.
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Build
        run: cabal build all

      - name: Run tests
        run: cabal test all

      - name: Install
        run: cabal install jl4-lsp --overwrite-policy=always

      # - name: Build documentation
      #   run: cabal haddock all

  build-ts-monorepo:
    name: TS Monorepo (including VSCode Extension) ${{ matrix.node-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    container: ${{ (matrix.os == 'ubuntu-latest' && fromJSON('{"image":"ubuntu:24.04"}')) || null }}
    strategy:
      matrix:
        node-version: ["20.x"]
        os: [ubuntu-latest, ARM64, X64]

    steps:
      - name: Update repositories (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: apt update
      - name: Install deps (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: apt install -y git sudo software-properties-common curl xvfb

      - name: Install deps (macOS)
        if: matrix.os == 'ARM64'
        run: brew install xquartz

      - name: Install deps (macOS)
        if: matrix.os == 'X64'
        env:
          PATH: "/usr/local/homebrew/bin:${{ env.PATH }}"
          HOMEBREW_PREFIX: "/usr/local/homebrew"
        run: brew install xquartz

      - name: Update git config
        run: git config --global --add safe.directory $GITHUB_WORKSPACE
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          cache-dependency-path: package-lock.json
          node-version: ${{ matrix.node-version }}
          cache: npm
      - run: npm ci
      - name: Check if package.json in sync with lockfile
        run: |
          npm install --ignore-scripts --package-lock-only --engine-strict
          git diff --exit-code package-lock.json
      - run: npm run build
      - run: npm run lint
      - run: npm run format:check
      - run: npm run check
      - run: xvfb-run -a npm run test
        # working-directory: ts-apps/vscode
